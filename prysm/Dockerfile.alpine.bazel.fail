# Note: The Prysm team builds alpine containers from debian with bazel run //beacon-chain:image_bundle_alpine and a prereq of bazel, go, python-is-python3
# Todo: Understand what that does, exactly, and how to reproduce it in a Dockerfile
# Build Prysm in a stock Go build container
FROM golang:alpine as builder

ARG BUILD_TARGET

RUN apk update && apk add --no-cache cmake npm && npm install -g @bazel/bazelisk 
RUN bazel version

WORKDIR /go/src
RUN git clone https://github.com/prysmaticlabs/prysm.git && cd prysm && git config advice.detachedHead false && git fetch --all --tags && git checkout ${BUILD_TARGET} && bazel build //beacon-chain:beacon-chain && bazel build //validator:validator
#&& go install -v --tags=blst_enabled ./beacon-chain ./validator

# Pull all binaries into a second stage deploy alpine container
FROM alpine:latest

ARG USER
ARG UID

RUN apk update && apk add --no-cache ca-certificates

# See https://stackoverflow.com/a/55757473/12429735RUN
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    "${USER}"

# Copy executable
COPY --from=builder /go/src/prsym/bazel-bin/beacon-chain/linux_amd64_stripped/beacon-chain /usr/local/bin/
COPY --from=builder /go/src/prysm/bazel-bin/beacon-chain/linux_amd64_stripped/validator /usr/local/bin/
# Create data mount point with permissions
RUN mkdir -p /var/lib/prysm && chown ${USER}:${USER} /var/lib/prysm

# Use an unprivileged user.
USER ${USER}:${USER}

EXPOSE 4000 13000 12000/udp
ENTRYPOINT ["beacon-chain", "--datadir", "/var/lib/prysm", "--http-web3provider", "http://geth:8545", "--rpc-host", "0.0.0.0"]
