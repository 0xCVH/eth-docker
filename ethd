#!/bin/bash

cmd() {
    docker-compose "$@"
}

update() {
    cmd build --pull
 #   cmd pull

 #   echo ""
 #   echo "Errors showing denied pull access for validator utility functions are normal"
 #   echo ""
}

upgrade() {
  update
}

start() {
    cmd up -d eth
}

up() {
    start
}

stop() {
    cmd down --remove-orphans
}

down() {
    stop
}

restart() {
    stop
    start
}

logs() {
    cmd logs "$@"
}

query_consensus_client() {
    CONSENSUS_CLIENT=$(whiptail --notags --title "Select consensus client" --menu \
    "Which consensus client do you want to run?" 15 60 7 \
    "teku-base.yml" "Teku" \
    "lh-base.yml" "Lighthouse" \
    "prysm-base.yml" "Prysm" \
    "nimbus-base.yml" "Nimbus" \
    "teku-validator.yml" "Teku validator client with Infura beacon" \
    "lh-validator.yml" "Lighthouse validator client with Infura beacon" 3>&1 1>&2 2>&3)

    # Ask the user
    exitstatus=$?
    if [ $exitstatus != 0 ]; then exit 0 ; fi

    echo "Your consensus client file is:" $CONSENSUS_CLIENT
}

query_execution_client() {
    EXECUTION_CLIENT=$(whiptail --notags --title "Select execution client" --menu \
    "Which execution client do you want to run?  Choose Custom for 3rd parties like Infura" 15 60 6 \
    "NONE" "Custom" \
    "geth.yml" "Geth" \
    "nm.yml" "Nethermind" \
    "besu.yml" "Besu" 3>&1 1>&2 2>&3)

    # Ask the user
    exitstatus=$?
    if [ $exitstatus != 0 ]; then exit 0 ; fi

    if [ $EXECUTION_CLIENT = "NONE" ]; then
        unset EXECUTION_CLIENT
        EC_NODE=$(whiptail --title "Configure custom execution client node" --inputbox "What is the URL for your custom execution client node? (right-click to paste)" 10 60 https://goerli.infura.io/v3/... 3>&1 1>&2 2>&3)
        # Ask the user
        exitstatus=$?
        if [ $exitstatus = 0 ]; then
            echo "your EC_NODE is:" $EC_NODE
        else
            echo "You chose Cancel."
            exit 0
        fi
    else
        echo "Your execution client file is:" $EXECUTION_CLIENT
        if [ "$CONSENSUS_CLIENT" == "nimbus-base.yml" ]; then
            EC_NODE="ws://execution:8546"
        else
            EC_NODE="http://execution:8545"
        fi 
    fi
    # Update The Value in env.
    if ! grep -qF "EC_NODE" $ENV_FILE 2>/dev/null ; then
        echo "EC_NODE=${EC_NODE}" >> $ENV_FILE
    fi
    sed -i "s~^\(EC_NODE\s*=\s*\).*$~\1${EC_NODE}~" $ENV_FILE
}

query_grafana() {
    # Use Grafana
    if (whiptail --title "Select Option" --yesno "Do you want to use Grafana dashboards?" 10 60) then
        GRAFANA=yes
    else
        GRAFANA=no
    fi

    # Which Grafana should be used
    if [ $GRAFANA = "yes" ]; then
        GRAFANA_CLIENT=$(echo $(echo $CONSENSUS_CLIENT | cut -d '-' -f1)-grafana.yml:grafana-insecure.yml)
    else
        unset GRAFANA_CLIENT
    fi
}

query_infura_beacon() {
    CC_NODE=$(whiptail --title "Configure Infura beacon node" --inputbox "What is the URL for your Infura beacon? (right-click to paste)" 10 60 3>&1 1>&2 2>&3)
    # Ask the user
    exitstatus=$?
    if [ $exitstatus = 0 ]; then
        echo "your Infura beacon is:" $CC_NODE
    else
        echo "You chose Cancel."
        exit 0
    fi
}

config () {
    # Don't run as root
    if [[ $EUID -eq 0 ]]; then
        echo "Please run this as a non-root user." 
        exit 1
    fi

    # Don't run from another directory
    if ! [[ -f "ethd" ]]; then
        echo "Please run this from the eth-docker directory." 
        exit 1
    fi

    # Create ENV file if needed
    ENV_FILE=.env 

    if ! [[ -f "$ENV_FILE" ]]; then
        ENV_FILE_GUESS="$(eval realpath default.env)"
        ENV_TEMPLATE=$(whiptail --title "Configure ENV_FILE" --inputbox "No $ENV_FILE file found, press enter to use the default, or choose a backup" 10 60 $ENV_FILE_GUESS 3>&1 1>&2 2>&3)

        # Ask the user
        exitstatus=$?
        if [ $exitstatus = 0 ]; then
            echo "your ENV_TEMPLATE is:" $ENV_FILE
        else
            echo "You chose Cancel."
        fi

        # Update The Value in env.
        cp $ENV_TEMPLATE $ENV_FILE
    fi

    query_consensus_client

    if [[ "$CONSENSUS_CLIENT" != "teku-validator.yml" && "$CONSENSUS_CLIENT" != "lh-validator.yml" ]]; then
        CC_NODE="http://consensus:5052"

        query_execution_client
        query_grafana
    else
        unset EXECUTION_CLIENT
        unset GRAFANA_CLIENT

        query_infura_beacon
    fi

    # Update The Value in env.
    if ! grep -qF "CC_NODE" $ENV_FILE 2>/dev/null ; then
        echo "CC_NODE=${CC_NODE}" >> $ENV_FILE
    fi
    sed -i "s~^\(CC_NODE\s*=\s*\).*$~\1${CC_NODE}~" $ENV_FILE

    if [[ "$CONSENSUS_CLIENT" == "teku-base.yml" ]]; then
        # Use rapid sync
        if (whiptail --title "Select Option" --yesno "Do you want to use Teku rapid sync with Infura beacon?" 10 60) then
            RAPIDSYNC=yes
        else
            RAPIDSYNC=no
        fi
  
        if [ $RAPIDSYNC = "yes" ]; then
            query_infura_beacon
            CC_NODE="$CC_NODE/eth/v1/debug/beacon/states/finalized"
        else
            CC_NODE=""
        fi
    else
        CC_NODE=""
    fi

    # Update The Value in env.
    if ! grep -qF "TEKU_RAPID_SYNC" $ENV_FILE 2>/dev/null ; then
        echo "TEKU_RAPID_SYNC=${CC_NODE}" >> $ENV_FILE
    fi
    sed -i "s~^\(TEKU_RAPID_SYNC\s*=\s*\).*$~\1${CC_NODE}~" $ENV_FILE

    # COMPOSE_FILE

    # Guess COMPOSE_FILE
    COMPOSE_FILE_GUESS=$CONSENSUS_CLIENT
    if [ ${EXECUTION_CLIENT+x} ]; then
        COMPOSE_FILE_GUESS="$COMPOSE_FILE_GUESS:$EXECUTION_CLIENT"
    fi
    if [ ${GRAFANA_CLIENT+x} ]; then
        COMPOSE_FILE_GUESS="$COMPOSE_FILE_GUESS:$GRAFANA_CLIENT"
    fi

    if ! (whiptail --title "Does COMPOSE_FILE look good?" --yesno "$COMPOSE_FILE_GUESS" 10 60) then
        COMPOSE_FILE=$(whiptail --title "Configure COMPOSE_FILE" --inputbox "What is your COMPOSE_FILE?" 10 60 $COMPOSE_FILE_GUESS 3>&1 1>&2 2>&3)	
    else
        COMPOSE_FILE=${COMPOSE_FILE_GUESS}
    fi

    # Ask the user
    exitstatus=$?
    if [ $exitstatus = 0 ]; then
        echo "Your COMPOSE_FILE is:" $COMPOSE_FILE
    else
        echo "You chose Cancel."
        exit 0
    fi

    # Update The Value in env.
    if ! grep -qF "COMPOSE_FILE" $ENV_FILE 2>/dev/null ; then
        echo "COMPOSE_FILE=${COMPOSE_FILE}" >> $ENV_FILE
    fi
    sed -i "s/^\(COMPOSE_FILE\s*=\s*\).*$/\1${COMPOSE_FILE}/" $ENV_FILE

    if [[ "$CONSENSUS_CLIENT" != "teku-validator.yml" && "$CONSENSUS_CLIENT" != "lh-validator.yml" ]]; then
        # Mainnet or Testnet network

        NETWORK=$(whiptail --notags --title "Select Network" --menu \
        "Which network do you want to run on?" 15 60 3 \
        "prater" "Prater Testnet" \
        "mainnet" "Ethereum Mainnet" 3>&1 1>&2 2>&3)

        # Update The Value in env.
        if [ $NETWORK = "mainnet" ]; then
            sed -i "s/^\(NETWORK\s*=\s*\).*$/\1mainnet/" $ENV_FILE
            sed -i "s/^\(EC_NETWORK\s*=\s*\).*$/\1mainnet/" $ENV_FILE
            echo "You chose to run on Ethereum mainnet"
        elif [ $NETWORK = "prater" ]; then
            sed -i "s/^\(NETWORK\s*=\s*\).*$/\1prater/" $ENV_FILE
            sed -i "s/^\(EC_NETWORK\s*=\s*\).*$/\1goerli/" $ENV_FILE
            echo "You chose to run on Prater testnet"
        else
            echo "You chose Cancel."
            exit 0
        fi
    fi
}

printhelp() {
    me=$(basename $BASH_SOURCE)
    echo "usage: $me [help|-h|--help] <subcommand>"
    echo ""
    echo "optional arguments:"
    echo "  help | -h | --help"
    echo "    print this message and exit"
    echo ""
    echo "subcommands:"
    echo "  config "
    echo "     configures the tool with your choice of clients"
    echo "  update "
    echo "     updates all client versions, but notably does not update this tool itself"
    echo "  start"
    echo "     starts the node software"
    echo "  stop"
    echo "     stops the node software"
    echo "  restart"
    echo "     restarts the node software, a combination of stop and start"
    echo "  logs"
    echo "     shows logs"
    echo "  cmd <command>"
    echo "     executes arbitrary docker-compose command. use "help" help to list them"
    echo ""
    echo ""
    echo "The logs subcommand can be appended by flags and specify the container/s. example: "
    echo ""
    echo "  $me logs -f --tail 500 ec"
    echo "    shows logs only for ec service"
    echo ""
    echo ""
    echo "Be sure to run the config command as a non-root user, and all other commands"
    echo "either with sudo, or as a user who is part of the docker group"
    echo ""
    exit 0
}

if [[ "$#" -eq 0 || "$1" == "help" || "$1" == "-h" || "$1" == "--help" ]]; then
    printhelp
fi

command=${1}
shift

${command} $@
