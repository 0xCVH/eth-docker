#!/bin/bash
#set -euo pipefail
set -uo pipefail

cmd() {
    docker-compose "${@}"
}

update() {
    if git branch | grep -q master; then
      git branch -m master main
      git fetch origin
      git branch -u origin/main main
      git remote set-head origin -a
    fi
    if [ "${EUID}" -eq 0 ]; then
      sudo -u "${OWNER}" git pull
    else
      git pull
    fi
    cmd build --pull
    exec 3>&1
    exec 4>&2
    exec 1> /dev/null
    exec 2> /dev/null
    cmd pull || true
    exec 1>&3
    exec 2>&4
    envmigrate
}

upgrade() {
  update
}

start() {
    cmd up -d eth
}

up() {
    start
}

run() {
    start
}

stop() {
    cmd down --remove-orphans
}

down() {
    stop
}

terminate() {
    while true; do
        read -rp "WARNING - this action will destroy all data stores for this Ethereum node. Do you wish to continue? (No/Yes) " yn
        case $yn in
            [Yy]es ) break;;
            * ) echo "Aborting, no changes made"; exit 1;;
        esac
    done

    down
    docker volume rm $(docker volume ls -q | grep $(basename $(realpath .)))
    echo ""
    echo "All containers stopped and all volumes deleted"
    echo ""
}

restart() {
    stop
    start
}

logs() {
    cmd logs "${@}"
}

envmigrate() {
    if [ ! -f "./${ENV_FILE}" ]; then
        return
    fi
    ALL_VARS=( COMPOSE_FILE EC_NODE EC_FALLBACK_NODE1 EC_FALLBACK_NODE2 GRAFFITI NETWORK EC_NETWORK \
             PRYSM_PEER_COUNT LH_PEER_COUNT TEKU_PEER_COUNT NIM_PEER_COUNT DOMAIN ACME_EMAIL \
             CF_EMAIL CF_API_TOKEN AWS_PROFILE AWS_HOSTED_ZONE_ID GRAFANA_HOST PRYSM_HOST \
             EC_HOST EC_WS_HOST DDNS_SUBDOMAIN DDNS_PROXY TEKU_RAPID_SYNC CC_NODE BEACON_STATS_API \
             EC_P2P_PORT LH_PORT PRYSM_PORT PRYSM_UDP_PORT NIM_PORT TEKU_PORT GRAFANA_PORT \
             PRYSM_WEB_PORT TRAEFIK_WEB_PORT TRAEFIK_WEB_HTTP_PORT EC_RPC_PORT EC_WS_PORT \
             RESTART LOG_LEVEL )
    OLD_VARS=( ETH1_NODE ETH1_FALLBACK_NODE1 ETH1_FALLBACK_NODE2 ETH1_NETWORK ETH1_HOST \
             ETH1_WS_HOST BN_NODE ETH1_PORT ETH1_RPC_PORT ETH1_WS_PORT )
    NEW_VARS=( EC_NODE EC_FALLBACK_NODE1 EC_FALLBACK_NODE2 EC_NETWORK EC_HOST \
             EC_WS_HOST CC_NODE EC_P2P_PORT EC_RPC_PORT EC_WS_PORT )

    if [ "${EUID}" -eq 0 ]; then
      # Previous version of this tool when run as root may have created a root-owned .env.bak
      if [ -f ./env.bak ]; then
          rm .env.bak
      fi
      sudo -u "${OWNER}" cp "${ENV_FILE}" .env.bak
      sudo -u "${OWNER}" cp default.env "${ENV_FILE}"
      sudo -u "${OWNER}" cp .env.bak .env.source
    else
      cp "${ENV_FILE}" .env.bak
      cp default.env "${ENV_FILE}"
      cp .env.bak .env.source
    fi
    # TEKU_RAPID_SYNC has whitespace
    if grep -qF "TEKU_RAPID_SYNC" .env.source 2>/dev/null ; then
        sed -i "s~^\(TEKU_RAPID_SYNC\s*=\s*\)\(.*\)$~\1\"\2\"~" .env.source
    fi
    # In case GRAFFITI has whitespace
    if grep -qF "GRAFFITI" .env.source 2>/dev/null ; then
        sed -i "s~^\(GRAFFITI\s*=\s*\)\(.*\)$~\1\"\2\"~" .env.source
    fi
    source .env.source 2>/dev/null || true
    rm .env.source
    # Migrate over user settings
    for var in "${ALL_VARS[@]}"; do
        if [ -n "${!var+set}" ]; then
            sed -i "s~^\(${var}\s*=\s*\).*$~\1${!var}~" "${ENV_FILE}"
        fi
    done
    # Migrate from older-style naming
    for index in "${!OLD_VARS[@]}"; do
        if [ -n "${!OLD_VARS[index]+set}" ]; then
            sed -i "s~^\(${NEW_VARS[index]}\s*=\s*\).*$~\1${!OLD_VARS[index]}~" "${ENV_FILE}"
        fi
    done
    # Migrate http://eth1 and http://beacon
    sed -i "s/http:\/\/eth1/http:\/\/execution/g" "${ENV_FILE}"
    sed -i "s/http:\/\/beacon/http:\/\/consensus/g" "${ENV_FILE}"

    echo "Your ${ENV_FILE} configuration settings have been migrated to a fresh copy. You can \
find the original contents in .env.bak."
    echo "NB: If you made changes to the source or binary build targets, these have NOT \
been migrated, please recreate these changes yourself."
}

query_consensus_client() {
    CONSENSUS_CLIENT=$(whiptail --notags --title "Select consensus client" --menu \
    "Which consensus client do you want to run?" 15 60 7 \
    "teku-base.yml" "Teku" \
    "lh-base.yml" "Lighthouse" \
    "prysm-base.yml" "Prysm" \
    "nimbus-base.yml" "Nimbus" \
    "teku-validator.yml" "Teku validator client with Infura beacon" \
    "lh-validator.yml" "Lighthouse validator client with Infura beacon" 3>&1 1>&2 2>&3)

    exitstatus=$?
    if [ $exitstatus -eq 0 ]; then
        echo "Your consensus client file is:" "${CONSENSUS_CLIENT}"
    else
        echo "You chose Cancel."
        exit 0
    fi
}

query_custom_execution_client() {
        EC_CUSTOM_NODE=$(whiptail --title "Configure custom execution client" --inputbox "What is the URL for your custom execution client? (right-click to paste)" 10 60 https://${EC_NETWORK}.infura.io/v3/... 3>&1 1>&2 2>&3)

        exitstatus=$?
        if [ $exitstatus -eq 0 ]; then
            echo "your custom execution client is:" $EC_CUSTOM_NODE
        else
            echo "You chose Cancel."
            exit 0
        fi
}

query_fallback_execution_client() {
        EC_FALLBACK_NODE1=$(whiptail --title "Configure fallback execution client" --inputbox "What is the URL for your fallback execution client? (right-click to paste)" 10 60 "https://${EC_NETWORK}.infura.io/v3/..." 3>&1 1>&2 2>&3)

        exitstatus=$?
        if [ $exitstatus -eq 0 ]; then
            echo "your fallback execution client is:" "${EC_FALLBACK_NODE1}"
        else
            echo "You chose Cancel."
            exit 0
        fi
}

query_execution_client() {
    EXECUTION_CLIENT=$(whiptail --notags --title "Select execution client" --menu \
    "Which execution client do you want to run?  Choose Custom for 3rd parties like Infura" 15 60 6 \
    "NONE" "Custom" \
    "geth.yml" "Geth" \
    "nm.yml" "Nethermind" \
    "besu.yml" "Besu" 3>&1 1>&2 2>&3)

    exitstatus=$?
    if [ $exitstatus -ne 0 ]; then
        echo "You chose Cancel."
        exit 0
    fi

    if [ "${EXECUTION_CLIENT}" == "NONE" ]; then
        unset EXECUTION_CLIENT
        query_custom_execution_client
        EC_NODE="${EC_CUSTOM_NODE}"
        EC_FALLBACK_NODE1="${EC_NODE}"
        EC_FALLBACK_NODE2="${EC_NODE}"
    else
        echo "Your execution client file is:" "${EXECUTION_CLIENT}"
        if [ "$CONSENSUS_CLIENT" == "nimbus-base.yml" ]; then
            EC_NODE="ws://execution:8546"
        else
            EC_NODE="http://execution:8545"
        fi
        EC_FALLBACK_NODE1="${EC_NODE}"
        EC_FALLBACK_NODE2="${EC_NODE}"

        if (whiptail --title "Select Option" --yesno "Do you want to use a fallback execution client?" 10 60) then
            query_fallback_execution_client
            if [ "${CONSENSUS_CLIENT}" != "prysm-base.yml" ]; then
                EC_NODE="${EC_NODE}"",""${EC_FALLBACK_NODE1}"
            fi
        fi
    fi
}

query_grafana() {
    if (whiptail --title "Select Option" --yesno "Do you want to use Grafana dashboards?" 10 60) then
        GRAFANA_CLIENT=$(echo $(echo "${CONSENSUS_CLIENT}" | cut -d '-' -f1)-grafana.yml:grafana-insecure.yml)
    else
        unset GRAFANA_CLIENT
    fi
}

query_infura_beacon() {
    INFURA_BEACON=$(whiptail --title "Configure Infura beacon node" --inputbox "What is the URL for your Infura beacon? (right-click to paste)" 10 60 3>&1 1>&2 2>&3)

    exitstatus=$?
    if [ $exitstatus -eq 0 ]; then
        echo "your Infura beacon is:" "${INFURA_BEACON}"
    else
        echo "You chose Cancel."
        exit 0
    fi
}

query_graffiti() {
    GRAFFITI=$(whiptail --title "Configure Graffiti" --inputbox "What Graffiti do you want to send with your blocks? (up to 32 characters)" 10 37 "eth-docker" 3>&1 1>&2 2>&3)

    exitstatus=$?
    if [ $exitstatus -eq 0 ]; then
        echo "your Graffiti is:" "${GRAFFITI}"
    else
        echo "You chose Cancel."
        exit 0
    fi
}

set_value_in_env() {
    # Assumes that "var" has been set to the name of the variable to be changed
    if [ "${!var+x}" ]; then
        if ! grep -qF "${var}" "${ENV_FILE}" 2>/dev/null ; then
            echo "${var}=${!var}" >> "${ENV_FILE}"
        else
            sed -i "s~^\(${var}\s*=\s*\).*$~\1${!var}~" "${ENV_FILE}"
        fi
    fi
}

config () {
    # Create ENV file if needed
    if ! [[ -f "${ENV_FILE}" ]]; then
        ENV_FILE_GUESS="$(eval realpath default.env)"
        ENV_TEMPLATE=$(whiptail --title "Configure ENV_FILE" --inputbox "No ${ENV_FILE} file found, press enter to use the default, or choose a backup" 10 60 "${ENV_FILE_GUESS}" 3>&1 1>&2 2>&3)

        exitstatus=$?
        if [ $exitstatus -eq 0 ]; then
            echo "your configuration file template is:" "${ENV_TEMPLATE}"
        else
            echo "You chose Cancel."
        fi

        if [ "${EUID}" -eq 0 ]; then
          sudo -u "${OWNER}" cp "${ENV_TEMPLATE}" "${ENV_FILE}"
        else
          cp "${ENV_TEMPLATE}" "${ENV_FILE}"
        fi
    fi

    query_consensus_client

    if [[ "${CONSENSUS_CLIENT}" != "teku-validator.yml" && "${CONSENSUS_CLIENT}" != "lh-validator.yml" ]]; then
        CC_NODE="http://consensus:5052"

        # Mainnet or Testnet network

        NETWORK=$(whiptail --notags --title "Select Network" --menu \
        "Which network do you want to run on?" 15 60 3 \
        "prater" "Prater Testnet" \
        "mainnet" "Ethereum Mainnet" 3>&1 1>&2 2>&3)

        if [ "${NETWORK}" = "mainnet" ]; then
            EC_NETWORK=mainnet
            echo "You chose to run on Ethereum mainnet"
        elif [ "${NETWORK}" = "prater" ]; then
            EC_NETWORK=goerli
            echo "You chose to run on Prater testnet"
        else
            echo "You chose Cancel."
            exit 0
        fi

        query_graffiti
        query_execution_client
        query_grafana
    else
        unset EXECUTION_CLIENT
        unset GRAFANA_CLIENT

        query_graffiti
        query_infura_beacon
        CC_NODE="${INFURA_BEACON}"
    fi

    if [[ "${CONSENSUS_CLIENT}" == "teku-base.yml" ]]; then
        if (whiptail --title "Select Option" --yesno "Do you want to use Teku rapid sync with Infura beacon?" 10 60) then
            query_infura_beacon
            TEKU_RAPID_SYNC="${INFURA_BEACON}/eth/v1/debug/beacon/states/finalized"
        else
            TEKU_RAPID_SYNC=""
        fi
    else
       TEKU_RAPID_SYNC=""
    fi

    COMPOSE_FILE="${CONSENSUS_CLIENT}"
    if [ "${EXECUTION_CLIENT+x}" ]; then
        COMPOSE_FILE="${COMPOSE_FILE}:${EXECUTION_CLIENT}"
    fi
    if [ "${GRAFANA_CLIENT+x}" ]; then
        COMPOSE_FILE="${COMPOSE_FILE}:${GRAFANA_CLIENT}"
    fi

    echo "Your COMPOSE_FILE is:" "${COMPOSE_FILE}"

    var=GRAFFITI
    set_value_in_env
    var=CC_NODE
    set_value_in_env
    var=TEKU_RAPID_SYNC
    set_value_in_env
    var=COMPOSE_FILE
    set_value_in_env
    var=EC_NODE
    set_value_in_env
    var=EC_FALLBACK_NODE1
    set_value_in_env
    var=EC_FALLBACK_NODE2
    set_value_in_env
    var=NETWORK
    set_value_in_env
    var=EC_NETWORK
    set_value_in_env
}

printhelp() {
    me=$(basename "${BASH_SOURCE}")
    echo "usage: ${me} [help|-h|--help] <subcommand>"
    echo ""
    echo "optional arguments:"
    echo "  help | -h | --help"
    echo "    print this message and exit"
    echo ""
    echo "subcommands:"
    echo "  config "
    echo "     configures eth-docker with your choice of Ethereum clients"
    echo "  update "
    echo "     updates all client versions and eth-docker itself"
    echo "  start"
    echo "     starts the Ethereum node software"
    echo "  stop"
    echo "     stops the Ethereum node software"
    echo "  restart"
    echo "     restarts the Ethereum node software, a combination of stop and start"
    echo "  logs"
    echo "     shows logs"
    echo "  cmd <command>"
    echo "     executes arbitrary docker-compose command. use \"cmd help\" to list them"
    echo "  terminate"
    echo "     stops the Ethereum node software and destroys all data stores"
    echo ""
    echo ""
    echo "The logs subcommand can be appended by flags and specify the container\(s\). example: "
    echo ""
    echo "  $me logs -f --tail 500 execution"
    echo "    shows logs only for execution service"
    echo ""
    echo ""
    echo "Be sure to run the config command as a non-root user, and all other commands"
    echo "either with sudo, or as a user who is part of the docker group"
    echo ""
    exit 0
}

if [[ "${#}" -eq 0 || "${1}" == "help" || "${1}" == "-h" || "${1}" == "--help" ]]; then
    printhelp
fi

# Use this to make sure root doesn't end up owning files
OWNER=$(stat -c '%U' .)

if ! [ -f "ethd" ]; then
    echo "Please run this from the eth-docker directory."
    exit 1
fi

if [ "${OWNER}" == "root" ]; then
    echo "Please install eth-docker as a non-root user."
    exit 1
fi

ENV_FILE=.env

command="${1}"
shift

"${command}" "${@}"
